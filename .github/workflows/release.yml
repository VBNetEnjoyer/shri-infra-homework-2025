name: Release

on:
    workflow_dispatch:

jobs:
    lint:
        runs-on: ubuntu-latest
        steps:
            - uses: actions/checkout@v4

            - name: Setup Node.js
              uses: actions/setup-node@v4
              with:
                  node-version: 18 # или нужная тебе версия

            - name: Install dependencies
              run: npm ci

            - name: Run linter
              run: npm run lint

    test:
        runs-on: ubuntu-latest
        steps:
            - uses: actions/checkout@v4

            - name: Setup Node.js
              uses: actions/setup-node@v4
              with:
                  node-version: 18

            - name: Install dependencies
              run: npm ci

            - name: Run tests
              run: npm run test

    release:
        needs: [lint, test]
        permissions:
            contents: write
            issues: write
            pull-requests: write
        runs-on: ubuntu-latest
        steps:
            - uses: actions/checkout@v4
              with:
                  fetch-depth: 0

            - name: Create release branch
              run: |
                  RELEASE_VERSION=${{ github.run_number }}
                  git config --global user.email "you@example.com"
                  git config --global user.name "Your Name"
                  git checkout -b releases/$RELEASE_VERSION
                  git push origin releases/$RELEASE_VERSION

            - name: Set up Docker
              uses: docker/setup-docker-action@v4

            - name: Build Docker image
              run: |
                  RELEASE_VERSION=${{ github.run_number }}
                  docker build -t cr.yandex/${{ secrets.YC_REGISTRY_ID }}/app:$RELEASE_VERSION .
                  docker tag cr.yandex/${{ secrets.YC_REGISTRY_ID }}/app:$RELEASE_VERSION cr.yandex/${{ secrets.YC_REGISTRY_ID }}/app:${RELEASE_VERSION}_latest

            - name: Log in to Yandex Container Registry
              run: |
                  echo ${{ secrets.YC_OAUTH_TOKEN }}|docker login \
                  --username oauth \
                  --password-stdin \
                  cr.yandex

            - name: Push Docker image
              run: |
                  RELEASE_VERSION=${{ github.run_number }}
                  docker push cr.yandex/${{ secrets.YC_REGISTRY_ID }}/app:$RELEASE_VERSION
                  docker push cr.yandex/${{ secrets.YC_REGISTRY_ID }}/app:${RELEASE_VERSION}_latest

            - name: Create release tag
              run: |
                  RELEASE_VERSION=${{ github.run_number }}
                  git config --global user.email "githubActions@example.com"
                  git config --global user.name "Github Actions"
                  git tag -a $RELEASE_VERSION -m "Release $RELEASE_VERSION"
                  git push origin $RELEASE_VERSION

            - name: Generate changelog and create issue
              run: |
                  RELEASE_VERSION=${{ github.run_number }}
                  AUTHOR=${{ github.actor }}
                  DATE=$(date +'%Y-%m-%d')


                  PREVIOUS_TAG=$(git describe --tags --abbrev=0 --match "[0-9]*" $(git rev-list --tags --max-count=1 --skip=1) 2>/dev/null || echo "")

                  if [ -z "$PREVIOUS_TAG" ]; then
                    COMMITS=$(git log --pretty=format:"- %s (%h)" main)
                  else
                    COMMITS=$(git log --pretty=format:"- %s (%h)" $PREVIOUS_TAG..main)
                  fi


                  echo -e "# $RELEASE_VERSION ($DATE)\n\n$COMMITS\n\n$(cat CHANGELOG.md)" > CHANGELOG.md
                  git add CHANGELOG.md
                  git commit -m "Update CHANGELOG.md for release $RELEASE_VERSION"
                  git push origin releases/$RELEASE_VERSION


                  ISSUE_BODY=$(cat <<EOF
                  **Release Date:** $DATE
                  **Author:** $AUTHOR
                  **Version:** $RELEASE_VERSION
                  **Docker Image:** cr.yandex/${{ env.REGISTRY_ID }}/${{ env.APP_NAME }}:$RELEASE_VERSION

                  **Changes:**
                  $COMMITS
                  EOF
                  )

                  gh issue create --title "Release $RELEASE_VERSION" --body "$ISSUE_BODY"
              env:
                GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
